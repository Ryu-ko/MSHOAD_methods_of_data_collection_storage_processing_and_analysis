-- Sequence for Clients
CREATE SEQUENCE seq_clients START WITH 1;

-- Table "Clients"
CREATE TABLE Clients (
    ClientID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    FirstName NVARCHAR2(50) NOT NULL,
    LastName NVARCHAR2(50) NOT NULL,
    Email NVARCHAR2(100) UNIQUE NOT NULL,
    PhoneNumber NVARCHAR2(15),
    Password NVARCHAR2(255) NOT NULL, --encrypted
    Address NVARCHAR2(200)
);

-- Sequence for Categories
CREATE SEQUENCE seq_categories START WITH 1;

-- Table "Categories"
CREATE TABLE Categories (
    CategoryID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    CategoryName NVARCHAR2(100) NOT NULL
);
CREATE TABLE Categories (
    CategoryID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    CategoryName NVARCHAR2(100) NOT NULL,
    ParentID NUMBER,
    NodeLevel NUMBER,
    NodePath NVARCHAR2(400),
    CONSTRAINT Categories_Parent_FK FOREIGN KEY (ParentID) REFERENCES Categories(CategoryID)
);


-- Sequence for Products
CREATE SEQUENCE seq_products START WITH 1;

-- Table "Products"
CREATE TABLE Products (
    ProductID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    CategoryID NUMBER REFERENCES Categories(CategoryID),
    ProductName NVARCHAR2(100) NOT NULL,
    Description NVARCHAR2(1000),
    Price DECIMAL(10, 2) NOT NULL,
    StockQuantity NUMBER NOT NULL
);

-- Sequence for Orders
CREATE SEQUENCE seq_orders START WITH 1;

-- Table "Orders"
CREATE TABLE Orders (
    OrderID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ClientID NUMBER REFERENCES Clients(ClientID),
    OrderDate DATE NOT NULL,
    OrderAmount DECIMAL(10, 2)
);

-- Table "OrderedProducts"
CREATE TABLE OrderedProducts (
    OrderID NUMBER REFERENCES Orders(OrderID),
    ProductID NUMBER REFERENCES Products(ProductID),
    Quantity NUMBER NOT NULL,
    TotalCost DECIMAL(10, 2) NOT NULL,
    PRIMARY KEY (OrderID, ProductID)
);

-- Sequence for Reviews
CREATE SEQUENCE seq_reviews START WITH 1;

-- Table "Reviews"
CREATE TABLE Reviews (
    ReviewID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ProductID NUMBER REFERENCES Products(ProductID),
    ClientID NUMBER REFERENCES Clients(ClientID),
    ReviewText NVARCHAR2(1000) NOT NULL,
    Rating NUMBER CHECK (Rating BETWEEN 1 AND 5)
);

SELECT table_name 
FROM user_tables 
ORDER BY table_name;


CREATE OR REPLACE PROCEDURE AddClient(
    pFirstName NVARCHAR2, 
    pLastName NVARCHAR2, 
    pEmail NVARCHAR2, 
    pPhoneNumber NVARCHAR2, 
    pPassword NVARCHAR2, 
    pAddress NVARCHAR2
) AS 
BEGIN
    INSERT INTO Clients (FirstName, LastName, Email, PhoneNumber, Password, Address)
    VALUES (pFirstName, pLastName, pEmail, pPhoneNumber, pPassword, pAddress);
END AddClient;
/

CREATE OR REPLACE FUNCTION CountProductsInCategory(pCategoryID NUMBER) RETURN NUMBER IS
    vCount NUMBER;
BEGIN
    SELECT COUNT(ProductID) INTO vCount
    FROM Products
    WHERE CategoryID = pCategoryID;

    RETURN vCount;
END CountProductsInCategory;
/
CREATE INDEX idx_product_name ON Products(ProductName);

CREATE OR REPLACE VIEW OrdersWithTotalCost AS
SELECT o.OrderID, o.ClientID, o.OrderDate, o.OrderAmount, SUM(op.TotalCost) as TotalCostOfProducts
FROM Orders o
JOIN OrderedProducts op ON o.OrderID = op.OrderID
GROUP BY o.OrderID, o.ClientID, o.OrderDate, o.OrderAmount;


-- Добавляем клиентов
INSERT INTO Clients (FirstName, LastName, Email, PhoneNumber, Password, Address)
VALUES ('Иван', 'Иванов', 'ivan@example.com', '+71234567890', 'encryptedpassword1', 'Москва, ул. Ленина, 1');

INSERT INTO Clients (FirstName, LastName, Email, PhoneNumber, Password, Address)
VALUES ('Влад', 'Владов', 'vlad@example.com', '+71234567890', 'encrypt123password1', 'Минск, ул. Ленина, 1');

INSERT INTO Clients (FirstName, LastName, Email, PhoneNumber, Password, Address)
VALUES ('Мария', 'Петрова', 'maria@example.com', '+71234567891', 'encryptedpassword2', 'Санкт-Петербург, пр. Невский, 2');

-- Добавляем категории автомобилей
INSERT INTO Categories (CategoryName)
VALUES ('Седан');

INSERT INTO Categories (CategoryName)
VALUES ('Кроссовер');

INSERT INTO Categories (CategoryName)
VALUES ('Хэтчбек');

-- Добавляем автомобили
INSERT INTO Products (CategoryID, ProductName, Description, Price, StockQuantity)
VALUES (1, 'Toyota Camry', 'Седан, белого цвета, 2022 года выпуска', 2000000.00, 3);

INSERT INTO Products (CategoryID, ProductName, Description, Price, StockQuantity)
VALUES (2, 'Nissan Qashqai', 'Кроссовер, красного цвета, 2021 года выпуска', 1500000.00, 2);

INSERT INTO Products (CategoryID, ProductName, Description, Price, StockQuantity)
VALUES (3, 'Volkswagen Golf', 'Хэтчбек, синего цвета, 2020 года выпуска', 1400000.00, 4);

-- Добавляем заказы
INSERT INTO Orders (ClientID, OrderDate, OrderAmount)
VALUES (1, SYSDATE, 2000000.00);

INSERT INTO Orders (ClientID, OrderDate, OrderAmount)
VALUES (2, SYSDATE, 20000.00);

INSERT INTO Orders (ClientID, OrderDate, OrderAmount)
VALUES (21, SYSDATE, 400000.00);

INSERT INTO Orders (ClientID, OrderDate, OrderAmount)
VALUES (21, TO_DATE('2022-02-02', 'YYYY-MM-DD'), 400000.00);

INSERT INTO Orders (ClientID, OrderDate, OrderAmount)
VALUES (21, TO_DATE('2023-08-02', 'YYYY-MM-DD'), 400000.00);

INSERT INTO Orders (ClientID, OrderDate, OrderAmount)
VALUES (21, TO_DATE('2022-10-02', 'YYYY-MM-DD'), 400000.00);

select * from orders;
-- Добавляем заказанные автомобили
INSERT INTO OrderedProducts (OrderID, ProductID, Quantity, TotalCost)
VALUES (1, 1, 1, 2000000.00);

INSERT INTO OrderedProducts (OrderID, ProductID, Quantity, TotalCost)
VALUES (21, 2, 1, 20000.00);

INSERT INTO OrderedProducts (OrderID, ProductID, Quantity, TotalCost)
VALUES (23, 3, 2, 800000.00);

-- Добавляем отзывы
INSERT INTO Reviews (ProductID, ClientID, ReviewText, Rating)
VALUES (1, 1, 'Отличный автомобиль, очень доволен покупкой!', 5);



----------------- 4.1
WITH SalesAggregation AS (
    -- Monthly sales
    SELECT 
        EXTRACT(YEAR FROM OrderDate) AS "Year",
        EXTRACT(MONTH FROM OrderDate) AS "Month",
        NULL AS "Quarter",
        NULL AS "Half",
        SUM(OrderAmount) AS TotalSales
    FROM Orders
    GROUP BY 
        EXTRACT(YEAR FROM OrderDate),
        EXTRACT(MONTH FROM OrderDate)
    
    UNION ALL
    
    -- Quarterly sales
    SELECT 
        EXTRACT(YEAR FROM OrderDate) AS "Year",
        NULL AS "Month",
        TO_NUMBER(TO_CHAR(OrderDate, 'Q')) AS "Quarter",
        NULL AS "Half",
        SUM(OrderAmount) AS TotalSales
    FROM Orders
    GROUP BY 
        EXTRACT(YEAR FROM OrderDate),
        TO_NUMBER(TO_CHAR(OrderDate, 'Q'))
    
    UNION ALL
    
    -- Half yearly sales
    SELECT 
        EXTRACT(YEAR FROM OrderDate) AS "Year",
        NULL AS "Month",
        NULL AS "Quarter",
        CASE 
            WHEN EXTRACT(MONTH FROM OrderDate) <= 6 THEN 'First Half'
            ELSE 'Second Half'
        END AS "Half",
        SUM(OrderAmount) AS TotalSales
    FROM Orders
    GROUP BY 
        EXTRACT(YEAR FROM OrderDate),
        CASE 
            WHEN EXTRACT(MONTH FROM OrderDate) <= 6 THEN 'First Half'
            ELSE 'Second Half'
        END
    
    UNION ALL
    
    -- Yearly sales
    SELECT 
        EXTRACT(YEAR FROM OrderDate) AS "Year",
        NULL AS "Month",
        NULL AS "Quarter",
        NULL AS "Half",
        SUM(OrderAmount) AS TotalSales
    FROM Orders
    GROUP BY 
        EXTRACT(YEAR FROM OrderDate)
)

SELECT * 
FROM SalesAggregation
ORDER BY 
    "Year", 
    "Month" NULLS LAST,
    "Quarter" NULLS LAST, 
    "Half" NULLS LAST;


----------- 4.2
WITH SalesSummary AS (
    SELECT
        o.ClientID,
        SUM(op.TotalCost) AS TotalSales
    FROM Orders o
    JOIN OrderedProducts op ON o.OrderID = op.OrderID
    GROUP BY o.ClientID
),

TotalSales AS (
    SELECT SUM(TotalSales) AS GrandTotalSales FROM SalesSummary
),

MaxSales AS (
    SELECT MAX(TotalSales) AS BestSales FROM SalesSummary
)

SELECT
    c.ClientID,
    c.FirstName || ' ' || c.LastName AS SalesmanName,
    ss.TotalSales,
    (ss.TotalSales / ts.GrandTotalSales * 100) AS SalesPercentageOfTotal,
    (ss.TotalSales / ms.BestSales * 100) AS SalesPercentageOfBest
FROM SalesSummary ss
JOIN Clients c ON ss.ClientID = c.ClientID
CROSS JOIN TotalSales ts
CROSS JOIN MaxSales ms
ORDER BY ss.TotalSales DESC;

--------------- 4.3
drop table Clients2;
CREATE TABLE Clients2 (
    ClientID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    FirstName NVARCHAR2(50) NOT NULL,
    LastName NVARCHAR2(50) NOT NULL,
    Email NVARCHAR2(100) NOT NULL,
    PhoneNumber NVARCHAR2(15),
    Password NVARCHAR2(255) NOT NULL, --encrypted
    Address NVARCHAR2(200)
);

-- Пример данных для вставки
INSERT INTO Clients2 (FirstName, LastName, Email, PhoneNumber, Password, Address)
VALUES ('John', 'Doe', 'john.doe@email.com', '123-456-7890', 'hashed_password_1', '123 Main St');

INSERT INTO Clients2 (FirstName, LastName, Email, PhoneNumber, Password, Address)
VALUES ('Jane', 'Smith', 'jane.smith@email.com', '987-654-3210', 'hashed_password_2', '456 Oak St');
-- Пример данных для вставки (продолжение)
INSERT INTO Clients2 (FirstName, LastName, Email, PhoneNumber, Password, Address)
VALUES ('Michael', 'Johnson', 'michael.johnson@email.com', '111-222-3333', 'hashed_password_3', '789 Elm St');

INSERT INTO Clients2 (FirstName, LastName, Email, PhoneNumber, Password, Address)
VALUES ('Emily', 'Williams', 'emily.williams@email.com', '444-555-6666', 'hashed_password_4', '456 Pine St');

INSERT INTO Clients2 (FirstName, LastName, Email, PhoneNumber, Password, Address)
VALUES ('David', 'Smith', 'david.smith@email.com', '777-888-9999', 'hashed_password_5', '101 Oak St');

INSERT INTO Clients2 (FirstName, LastName, Email, PhoneNumber, Password, Address)
VALUES ('Emma', 'Brown', 'emma.brown@email.com', '999-888-7777', 'hashed_password_6', '202 Elm St');

INSERT INTO Clients2 (FirstName, LastName, Email, PhoneNumber, Password, Address)
VALUES ('Daniel', 'Miller', 'daniel.miller@email.com', '555-666-7777', 'hashed_password_7', '303 Pine St');

INSERT INTO Clients2 (FirstName, LastName, Email, PhoneNumber, Password, Address)
VALUES ('Olivia', 'Davis', 'olivia.davis@email.com', '123-456-7890', 'hashed_password_8', '404 Main St');

INSERT INTO Clients2 (FirstName, LastName, Email, PhoneNumber, Password, Address)
VALUES ('Ethan', 'Jones', 'ethan.jones@email.com', '987-654-3210', 'hashed_password_9', '505 Elm St');

INSERT INTO Clients2 (FirstName, LastName, Email, PhoneNumber, Password, Address)
VALUES ('Sophia', 'Moore', 'sophia.moore@email.com', '777-666-5555', 'hashed_password_10', '606 Oak St');

INSERT INTO Clients2 (FirstName, LastName, Email, PhoneNumber, Password, Address)
VALUES ('Matthew', 'Taylor', 'matthew.taylor@email.com', '111-222-3333', 'hashed_password_11', '707 Pine St');

INSERT INTO Clients2 (FirstName, LastName, Email, PhoneNumber, Password, Address)
VALUES ('Ava', 'Wilson', 'ava.wilson@email.com', '444-555-6666', 'hashed_password_12', '808 Elm St');

INSERT INTO Clients2 (FirstName, LastName, Email, PhoneNumber, Password, Address)
VALUES ('Liam', 'Anderson', 'liam.anderson@email.com', '123-456-7890', 'hashed_password_13', '909 Oak St');

INSERT INTO Clients2 (FirstName, LastName, Email, PhoneNumber, Password, Address)
VALUES ('Isabella', 'White', 'isabella.white@email.com', '987-654-3210', 'hashed_password_14', '101 Pine St');

INSERT INTO Clients2 (FirstName, LastName, Email, PhoneNumber, Password, Address)
VALUES ('Noah', 'Harris', 'noah.harris@email.com', '777-888-9999', 'hashed_password_15', '202 Main St');

INSERT INTO Clients2 (FirstName, LastName, Email, PhoneNumber, Password, Address)
VALUES ('Mia', 'Martin', 'mia.martin@email.com', '555-444-3333', 'hashed_password_16', '303 Elm St');

INSERT INTO Clients2 (FirstName, LastName, Email, PhoneNumber, Password, Address)
VALUES ('James', 'Thompson', 'james.thompson@email.com', '111-222-3333', 'hashed_password_17', '404 Pine St');
INSERT INTO Clients2 (FirstName, LastName, Email, PhoneNumber, Password, Address)
VALUES ('Jane', 'Smith', 'jane.smith@email.com', '987-654-3210', 'hashed_password_2', '456 Oak St');
-- Пример данных для вставки (продолжение)
INSERT INTO Clients2 (FirstName, LastName, Email, PhoneNumber, Password, Address)
VALUES ('Michael', 'Johnson', 'michael.johnson@email.com', '111-222-3333', 'hashed_password_3', '789 Elm St');

INSERT INTO Clients2 (FirstName, LastName, Email, PhoneNumber, Password, Address)
VALUES ('Emily', 'Williams', 'emily.williams@email.com', '444-555-6666', 'hashed_password_4', '456 Pine St');

INSERT INTO Clients2 (FirstName, LastName, Email, PhoneNumber, Password, Address)
VALUES ('David', 'Smith', 'david.smith@email.com', '777-888-9999', 'hashed_password_5', '101 Oak St');

INSERT INTO Clients2 (FirstName, LastName, Email, PhoneNumber, Password, Address)
VALUES ('Emma', 'Brown', 'emma.brown@email.com', '999-888-7777', 'hashed_password_6', '202 Elm St');

INSERT INTO Clients2 (FirstName, LastName, Email, PhoneNumber, Password, Address)
VALUES ('Daniel', 'Miller', 'daniel.miller@email.com', '555-666-7777', 'hashed_password_7', '303 Pine St');

INSERT INTO Clients2 (FirstName, LastName, Email, PhoneNumber, Password, Address)
VALUES ('Olivia', 'Davis', 'olivia.davis@email.com', '123-456-7890', 'hashed_password_8', '404 Main St');

INSERT INTO Clients2 (FirstName, LastName, Email, PhoneNumber, Password, Address)
VALUES ('Ethan', 'Jones', 'ethan.jones@email.com', '987-654-3210', 'hashed_password_9', '505 Elm St');

INSERT INTO Clients2 (FirstName, LastName, Email, PhoneNumber, Password, Address)
VALUES ('Sophia', 'Moore', 'sophia.moore@email.com', '777-666-5555', 'hashed_password_10', '606 Oak St');

INSERT INTO Clients2 (FirstName, LastName, Email, PhoneNumber, Password, Address)
VALUES ('Matthew', 'Taylor', 'matthew.taylor@email.com', '111-222-3333', 'hashed_password_11', '707 Pine St');

INSERT INTO Clients2 (FirstName, LastName, Email, PhoneNumber, Password, Address)
VALUES ('Ava', 'Wilson', 'ava.wilson@email.com', '444-555-6666', 'hashed_password_12', '808 Elm St');

INSERT INTO Clients2 (FirstName, LastName, Email, PhoneNumber, Password, Address)
VALUES ('Liam', 'Anderson', 'liam.anderson@email.com', '123-456-7890', 'hashed_password_13', '909 Oak St');

INSERT INTO Clients2 (FirstName, LastName, Email, PhoneNumber, Password, Address)
VALUES ('Isabella', 'White', 'isabella.white@email.com', '987-654-3210', 'hashed_password_14', '101 Pine St');

INSERT INTO Clients2 (FirstName, LastName, Email, PhoneNumber, Password, Address)
VALUES ('Noah', 'Harris', 'noah.harris@email.com', '777-888-9999', 'hashed_password_15', '202 Main St');

INSERT INTO Clients2 (FirstName, LastName, Email, PhoneNumber, Password, Address)
VALUES ('Mia', 'Martin', 'mia.martin@email.com', '555-444-3333', 'hashed_password_16', '303 Elm St');

INSERT INTO Clients2 (FirstName, LastName, Email, PhoneNumber, Password, Address)
VALUES ('James', 'Thompson', 'james.thompson@email.com', '111-222-3333', 'hashed_password_17', '404 Pine St');


CREATE OR REPLACE PROCEDURE GetClientsPaged(
    p_page_number IN NUMBER,
    p_rows_per_page IN NUMBER
)
AS
    p_start_row NUMBER;
    p_end_row NUMBER;
BEGIN
    -- Рассчитываем границы для текущей страницы
    p_start_row := (p_page_number - 1) * p_rows_per_page + 1;
    p_end_row := p_page_number * p_rows_per_page;

    FOR cur IN (
        WITH OrderedResults AS (
            SELECT
                ClientID,
                FirstName,
                LastName,
                Email,
                PhoneNumber,
                Password,
                Address,
                ROW_NUMBER() OVER (ORDER BY ClientID) AS row_num
            FROM
                Clients2
        )
        SELECT
            ClientID,
            FirstName,
            LastName,
            Email,
            PhoneNumber,
            Password,
            Address
        FROM
            OrderedResults
        WHERE
            row_num BETWEEN p_start_row AND p_end_row
    )
    LOOP
        -- Действия с каждой строкой, например, вывод на экран или сохранение в другую таблицу
        DBMS_OUTPUT.PUT_LINE('ClientID: ' || cur.ClientID || ', FirstName: ' || cur.FirstName || ', LastName: ' || cur.LastName);
    END LOOP;
END;
/

BEGIN
    GetClientsPaged(3, 5);  -- Пример вызова: страница 2, 10 строк на странице
END;
/






-- ROW_NUMBER() OVER (ORDER BY ClientID) AS row_num
-- присваивает уникальный номер (ранг) каждой строке в результирующем наборе данных 
-- на основе упорядочивания по значению ClientID
WITH OrderedResults AS (
    SELECT
        ClientID,
        FirstName,
        LastName,
        Email,
        PhoneNumber,
        Password,
        Address,
        ROW_NUMBER() OVER (ORDER BY ClientID) AS row_num
    FROM
        Clients2
)
SELECT
    ClientID,
    FirstName,
    LastName,
    Email,
    PhoneNumber,
    Password,
    Address
FROM
    OrderedResults
WHERE
    row_num BETWEEN 1 AND 20; -- Для первой страницы
select * from Clients2;
truncate table Clients2;
-- 4.5
-- PARTITION BY Email означает, что ранги будут назначаться отдельно для каждого 
-- уникального значения Email.
DELETE FROM Clients2
WHERE ClientID NOT IN (
    SELECT ClientID
    FROM (
        SELECT ClientID, ROW_NUMBER() OVER (PARTITION BY Email ORDER BY ClientID) AS rn
        FROM Clients2
    ) tmp
    WHERE rn > 1
);
select * from Clients2;

-- 4.6
-- Эта функция присваивает каждой строке внутри каждой группы (определенной PARTITION BY)
-- уникальный номер в соответствии с порядком сортировки. Самая свежая строка 
-- (с самой поздней датой) будет иметь номер 1, следующая - 2 и так далее.
WITH RankedOrders AS (
    SELECT
        o.ClientID,
        op.OrderID,
        op.TotalCost AS OrderAmount,
        ROW_NUMBER() OVER (PARTITION BY o.ClientID ORDER BY o.OrderDate DESC) AS rn --порядковый номер
    FROM
        Orders o
    JOIN
        OrderedProducts op ON o.OrderID = op.OrderID
)
SELECT
    c.ClientID,
    c.FirstName,
    c.LastName,
    SUM(o.OrderAmount) AS TotalOrderAmount
FROM
    Clients c
JOIN
    RankedOrders o ON c.ClientID = o.ClientID AND o.rn <= 6
GROUP BY
    c.ClientID, c.FirstName, c.LastName;
    

-- 4.7
CREATE TABLE Employees (
    EmployeeID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    FirstName NVARCHAR2(50) NOT NULL,
    LastName NVARCHAR2(50) NOT NULL
);

-- Добавление 10 записей в таблицу Employees
INSERT INTO Employees (FirstName, LastName) VALUES ('John', 'Doe');
INSERT INTO Employees (FirstName, LastName) VALUES ('Jane', 'Smith');
INSERT INTO Employees (FirstName, LastName) VALUES ('Alice', 'Johnson');
INSERT INTO Employees (FirstName, LastName) VALUES ('Bob', 'Williams');
INSERT INTO Employees (FirstName, LastName) VALUES ('Charlie', 'Brown');
INSERT INTO Employees (FirstName, LastName) VALUES ('David', 'Miller');
INSERT INTO Employees (FirstName, LastName) VALUES ('Eva', 'Clark');
INSERT INTO Employees (FirstName, LastName) VALUES ('Frank', 'Davis');
INSERT INTO Employees (FirstName, LastName) VALUES ('Grace', 'Taylor');
INSERT INTO Employees (FirstName, LastName) VALUES ('Henry', 'Anderson');

-- Добавление столбца EmployeeID к таблице Orders
ALTER TABLE Orders ADD (EmployeeID NUMBER REFERENCES Employees(EmployeeID));

-- Заполнение таблицы Orders 10 записями
-- укажите нужные значения для ClientID, OrderDate, OrderAmount и EmployeeID
INSERT INTO Orders (ClientID, OrderDate, OrderAmount, EmployeeID) VALUES (1, TO_DATE('2023-01-01', 'YYYY-MM-DD'), 100.00, 1);
INSERT INTO Orders (ClientID, OrderDate, OrderAmount, EmployeeID) VALUES (1, TO_DATE('2023-01-01', 'YYYY-MM-DD'), 100.00, 1);
INSERT INTO Orders (ClientID, OrderDate, OrderAmount, EmployeeID) VALUES (2, TO_DATE('2023-01-02', 'YYYY-MM-DD'), 150.00, 2);
INSERT INTO Orders (ClientID, OrderDate, OrderAmount, EmployeeID)
VALUES (2, TO_DATE('2023-11-14', 'YYYY-MM-DD'), 120.00, 1);

INSERT INTO Orders (ClientID, OrderDate, OrderAmount, EmployeeID)
VALUES (2, TO_DATE('2023-11-15', 'YYYY-MM-DD'), 80.00, 2);

-- содержит количество заказов (OrderCount)
-- DENSE_RANK() - это аналитическая функция в SQL, которая присваивает плотные (без пропусков) ранги значениям в результирующем наборе данных. Эта функция часто используется в контексте оконных (аналитических) функций для выполнения операций над группами данных.
-- DENSE_RANK() присваивает ранги на основе значения OrderCount в каждой группе клиентов (PARTITION BY eo.ClientID).
-- ORDER BY eo.OrderCount DESC устанавливает порядок сортировки по убыванию количества заказов.
-- Таким образом, для каждой группы клиентов (eo.ClientID), DENSE_RANK() будет присваивать наивысший ранг (самый большой) сотруднику с наибольшим количеством заказов (eo.OrderCount). Если есть сотрудники с одинаковым количеством заказов, они получат одинаковые ранги.
WITH EmployeeOrderCounts AS (
    SELECT
        o.ClientID,
        o.EmployeeID,
        COUNT(o.OrderID) AS OrderCount
    FROM
        Orders o
    GROUP BY
        o.ClientID, o.EmployeeID
)
, RankedOrders AS (
    SELECT
        eo.ClientID,
        eo.EmployeeID,
        DENSE_RANK() OVER (PARTITION BY eo.ClientID ORDER BY eo.OrderCount DESC) AS rnk
    FROM
        EmployeeOrderCounts eo
)
SELECT
    eo.ClientID,
    eo.EmployeeID,
    e.FirstName AS EmployeeFirstName,
    e.LastName AS EmployeeLastName,
    eo.OrderCount
FROM
    EmployeeOrderCounts eo
LEFT JOIN
    Employees e ON eo.EmployeeID = e.EmployeeID
JOIN
    RankedOrders ro ON eo.ClientID = ro.ClientID AND eo.EmployeeID = ro.EmployeeID
WHERE
    ro.rnk = 1 OR eo.EmployeeID IS NULL;


select * from orders;
select * from clients;
select * from Employees;






